#
# test std::io with pipe
#

set script_dir [file dirname [info script]]
source [file join $script_dir "../lib/runtimetestlib.exp"]

set_test [info script] 

set curr_dir [pwd]
cd $script_dir

## test pipe with compressed file as input

# compress trace.pcap
exec gzip -k -f trace.pcap

set test_passed 1;

spawn ./gzip_pipe.sh $PKTANON ../out.pcap
expect {
  "complete" {
      match_io_logs "istream"
      match_io_logs "ostream"
      expect eof
  }
  eof {
    fail "$test: failed running pktanon with default profile"
    cd $curr_dir
    break;
  }
}

## read number of packets and time
set packets_iden 0
set time_iden 0

regexp {processed packets:\s*(\d+)} $expect_out(buffer) match packets_iden;
regexp {\s(\d+)us} $expect_out(buffer) match time_iden;

## compare stats in trace file and output file
compare_stats trace.pcap ../out.pcap

exec rm trace.pcap.gz

cd $curr_dir
